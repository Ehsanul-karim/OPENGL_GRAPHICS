#pragma once
#pragma once
//
//  bottle.h
//  OpenGL Bottle Object
//

#ifndef OTREE_H
#define OTREE_H

#include <glad/glad.h>
#include <vector>
#include <glm/glm.hpp>
#include <glm/gtc/matrix_transform.hpp>
#include <glm/gtc/type_ptr.hpp>
#include "shader.h"

class OTree {
public:
    // Material properties
    glm::vec3 ambient;
    glm::vec3 diffuse;
    glm::vec3 specular;

    // Texture properties
    unsigned int diffuseMap;
    unsigned int specularMap;
    float shininess;

    // Constructor with default values
    OTree()
        : ambient(glm::vec3(0.2f)), diffuse(glm::vec3(0.5f)), specular(glm::vec3(1.0f)), shininess(32.0f),
        diffuseMap(0), specularMap(0) {
        setUpVertexData();
    }

    OTree(glm::vec3 amb, glm::vec3 diff, glm::vec3 spec, float shiny)
        : ambient(amb), diffuse(diff), specular(spec), shininess(shiny), diffuseMap(0), specularMap(0) {
        setUpVertexData();
    }

    OTree(unsigned int dMap, unsigned int sMap, float shiny)
        : diffuseMap(dMap), specularMap(sMap), shininess(shiny), ambient(glm::vec3(0.0f)), diffuse(glm::vec3(0.0f)), specular(glm::vec3(0.0f)) {
        setUpVertexData();
    }

    ~OTree() {
        glDeleteVertexArrays(1, &VAO);
        glDeleteBuffers(1, &VBO);
        glDeleteBuffers(1, &EBO);
    }

    void drawWithMaterial(Shader& shader, glm::mat4 model = glm::mat4(1.0f)) {
        shader.use();
        shader.setVec3("material.ambient", ambient);
        shader.setVec3("material.diffuse", diffuse);
        shader.setVec3("material.specular", specular);
        shader.setFloat("material.shininess", shininess);
        shader.setMat4("model", model);

        glBindVertexArray(VAO);
        glDrawElements(GL_TRIANGLES, static_cast<GLsizei>(indices.size()), GL_UNSIGNED_INT, 0);
    }

    void drawWithTexture(Shader& shader, glm::mat4 model = glm::mat4(1.0f)) {
        shader.use();

        shader.setInt("material.diffuse", 0);
        shader.setInt("material.specular", 1);
        shader.setFloat("material.shininess", shininess);
        shader.setMat4("model", model);

        glActiveTexture(GL_TEXTURE0);
        glBindTexture(GL_TEXTURE_2D, diffuseMap);
        glActiveTexture(GL_TEXTURE1);
        glBindTexture(GL_TEXTURE_2D, specularMap);

        glBindVertexArray(VAO);
        glDrawElements(GL_TRIANGLES, static_cast<GLsizei>(indices.size()), GL_UNSIGNED_INT, 0);
    }

private:
    unsigned int VAO, VBO, EBO;
    std::vector<float> vertices;
    std::vector<unsigned int> indices;

    void setUpVertexData() {
        // Define the vertex data (positions, normals, texture coordinates)
        vertices = {
        0.008638f, 0.730232f, 0.017311f, 0.8704f, 0.4400f, -0.2208f, 0.5043f, 0.8651f,  // Vertex 1
        0.312581f, 0.031791f, -0.176407f, 0.5546f, 0.4376f, -0.7078f, 0.6563f, 0.5159f,  // Vertex 2
        0.384492f, -0.005598f, 0.032547f, 0.3540f, 0.4407f, -0.8249f, 0.6922f, 0.4972f,  // Vertex 3
        0.185451f, -0.015350f, -0.305170f, -0.2595f, 0.4578f, -0.8503f, 0.5927f, 0.4923f,  // Vertex 4
        0.004676f, 0.018969f, -0.364414f, -0.5841f, 0.4548f, -0.6723f, 0.5023f, 0.5095f,  // Vertex 5
        -0.148448f, 0.089478f, -0.279728f, -0.8551f, 0.4536f, -0.2510f, 0.4258f, 0.5447f,  // Vertex 6
        -0.307818f, 0.019875f, -0.188355f, -0.8739f, 0.4484f, 0.1877f, 0.3461f, 0.5099f,  // Vertex 7
        -0.347367f, 0.046242f, -0.005984f, -0.6112f, 0.4334f, 0.6623f, 0.3263f, 0.5231f,  // Vertex 8
        -0.283606f, 0.101358f, 0.159208f, -0.3085f, 0.4263f, 0.8504f, 0.3582f, 0.5507f,  // Vertex 9
        -0.181187f, 0.036464f, 0.296197f, 0.3001f, 0.4089f, 0.8618f, 0.4094f, 0.5182f,  // Vertex 10
        -0.018233f, 0.019175f, 0.363990f, 0.5902f, 0.4066f, 0.6974f, 0.4909f, 0.5096f,  // Vertex 11
        0.154598f, 0.061351f, 0.283803f, 0.8286f, 0.4306f, 0.3578f, 0.5773f, 0.5307f,  // Vertex 12
        0.312243f, 0.011235f, 0.179617f, -0.8451f, -0.4949f, 0.2023f, 0.6561f, 0.5056f,  // Vertex 13
        0.007047f, 0.631701f, 0.014996f, -0.5243f, -0.4894f, 0.6968f, 0.5035f, 0.8159f,  // Vertex 14
        0.002360f, 0.821439f, -0.006527f, -0.3541f, -0.4914f, 0.7957f, 0.5012f, 0.9107f,  // Vertex 15
        0.203802f, 0.279068f, -0.159036f, 0.2216f, -0.5140f, 0.8287f, 0.6019f, 0.6395f,  // Vertex 16
        0.287113f, 0.217771f, 0.003612f, 0.5845f, -0.5104f, 0.6307f, 0.6436f, 0.6089f,  // Vertex 17
        0.137232f, 0.206139f, -0.269432f, 0.8238f, -0.5077f, 0.2521f, 0.5686f, 0.6031f,  // Vertex 18
        0.000393f, 0.304723f, -0.272987f, 0.8472f, -0.5072f, -0.1578f, 0.5002f, 0.6524f,  // Vertex 19
        -0.134733f, 0.235919f, -0.251907f, 0.5698f, -0.4914f, -0.6587f, 0.4326f, 0.6180f,  // Vertex 20
        -0.229250f, 0.308165f, -0.151118f, 0.2923f, -0.4825f, -0.8257f, 0.3854f, 0.6541f,  // Vertex 21
        -0.287577f, 0.241768f, -0.019870f, -0.2757f, -0.4672f, -0.8400f, 0.3562f, 0.6209f,  // Vertex 22
        -0.238602f, 0.305046f, 0.108695f, -0.5863f, -0.4645f, -0.6637f, 0.3807f, 0.6525f,  // Vertex 23
        -0.176429f, 0.228552f, 0.229773f, -0.8051f, -0.4862f, -0.3399f, 0.4118f, 0.6143f,  // Vertex 24
        -0.018310f, 0.298486f, 0.246640f, 0.8670f, 0.4040f, -0.2918f, 0.4908f, 0.6492f,  // Vertex 25
        0.139147f, 0.223708f, 0.240576f, 0.6291f, 0.4179f, -0.6554f, 0.5696f, 0.6119f,  // Vertex 26
        0.226335f, 0.273600f, 0.154765f, 0.3325f, 0.4313f, -0.8387f, 0.6132f, 0.6368f,  // Vertex 27
        0.000742f, 0.747177f, -0.007477f, -0.3491f, 0.4305f, -0.8323f, 0.5004f, 0.8736f,  // Vertex 28
        0.004113f, 0.852326f, -0.007169f, -0.4822f, 0.4322f, -0.7620f, 0.5021f, 0.9262f,  // Vertex 29
        0.184997f, 0.395891f, -0.088233f, -0.8803f, 0.4442f, -0.1665f, 0.5925f, 0.6979f,  // Vertex 30
        0.184393f, 0.452134f, 0.018381f, -0.8889f, 0.4418f, 0.1212f, 0.5922f, 0.7261f,  // Vertex 31
        0.111077f, 0.455765f, -0.164028f, -0.6533f, 0.4420f, 0.6147f, 0.5555f, 0.7279f,  // Vertex 32
        0.004715f, 0.426893f, -0.249716f, -0.2806f, 0.4272f, 0.8595f, 0.5024f, 0.7134f,  // Vertex 33
        -0.076983f, 0.440725f, -0.200849f, 0.2316f, 0.4165f, 0.8792f, 0.4615f, 0.7204f,  // Vertex 34
        -0.164793f, 0.465596f, -0.130530f, 0.4989f, 0.4261f, 0.7547f, 0.4176f, 0.7328f,  // Vertex 35
        -0.231175f, 0.424419f, -0.033669f, 0.8848f, 0.4207f, 0.2004f, 0.3844f, 0.7122f,  // Vertex 36
        -0.192452f, 0.465565f, 0.064140f, -0.8506f, -0.4546f, 0.2644f, 0.4038f, 0.7328f,  // Vertex 37
        -0.131515f, 0.484588f, 0.138141f, -0.5851f, -0.4682f, 0.6621f, 0.4342f, 0.7423f,  // Vertex 38
        -0.036589f, 0.440028f, 0.193700f, -0.3656f, -0.4787f, 0.7982f, 0.4817f, 0.7200f,  // Vertex 39
        0.060377f, 0.476171f, 0.156499f, 0.3681f, -0.4786f, 0.7971f, 0.5302f, 0.7381f,  // Vertex 40
        0.193368f, 0.433631f, 0.120081f, 0.4419f, -0.4796f, 0.7581f, 0.5967f, 0.7168f,  // Vertex 41
        0.002075f, 0.796185f, -0.007468f, 0.8596f, -0.4936f, 0.1323f, 0.5010f, 0.8981f,  // Vertex 42
        0.021309f, 0.657557f, -0.028791f, 0.8662f, -0.4920f, -0.0878f, 0.5107f, 0.8288f,  // Vertex 43
        0.442266f, -0.293696f, -0.213003f, 0.6075f, -0.4926f, -0.6231f, 0.7211f, 0.3532f,  // Vertex 44
        0.484926f, -0.248881f, 0.082979f, 0.3001f, -0.4797f, -0.8245f, 0.7425f, 0.3756f,  // Vertex 45
        0.289789f, -0.252680f, -0.327978f, -0.2550f, -0.4683f, -0.8460f, 0.6449f, 0.3737f,  // Vertex 46
        0.083736f, -0.250472f, -0.430924f, -0.4629f, -0.4766f, -0.7474f, 0.5419f, 0.3748f,  // Vertex 47
        -0.146084f, -0.243161f, -0.417137f, -0.8647f, -0.4714f, -0.1736f, 0.4270f, 0.3784f,  // Vertex 48
        -0.338090f, -0.232704f, -0.290312f, 0.8978f, 0.3916f, -0.2015f, 0.3310f, 0.3836f,  // Vertex 49
        -0.461606f, -0.261431f, -0.086930f, 0.7939f, 0.3965f, -0.4610f, 0.2692f, 0.3693f,  // Vertex 50
        -0.436879f, -0.223430f, 0.143716f, 0.4919f, 0.4317f, -0.7561f, 0.2816f, 0.3883f,  // Vertex 51
        -0.297131f, -0.190619f, 0.326895f, -0.3997f, 0.4536f, -0.7966f, 0.3514f, 0.4047f,  // Vertex 52
        -0.083664f, -0.186029f, 0.458651f, -0.4774f, 0.4494f, -0.7551f, 0.4582f, 0.4070f,  // Vertex 53
        0.156613f, -0.149852f, 0.385990f, -0.8093f, 0.4671f, -0.3561f, 0.5783f, 0.4251f,  // Vertex 54
        0.340185f, -0.204138f, 0.278325f, -0.8706f, 0.4696f, 0.1471f, 0.6701f, 0.3979f,  // Vertex 55
        0.017554f, 0.530559f, -0.024004f, -0.7383f, 0.4653f, 0.4883f, 0.5088f, 0.7653f,  // Vertex 56
        0.039124f, 0.606410f, 0.047520f, -0.2893f, 0.4422f, 0.8490f, 0.5196f, 0.8032f,  // Vertex 57
        0.539790f, -0.582998f, -0.212405f, 0.1868f, 0.4153f, 0.8903f, 0.7699f, 0.2085f,  // Vertex 58
        0.562678f, -0.542084f, 0.082779f, 0.3617f, 0.4169f, 0.8339f, 0.7813f, 0.2290f,  // Vertex 59
        0.336328f, -0.531520f, -0.431092f, 0.9119f, 0.4104f, -0.0058f, 0.6682f, 0.2342f,  // Vertex 60
        0.069595f, -0.538348f, -0.553010f, -0.8672f, -0.4424f, 0.2285f, 0.5348f, 0.2308f,  // Vertex 61
        -0.226806f, -0.528424f, -0.512363f, -0.7909f, -0.4460f, 0.4190f, 0.3866f, 0.2358f,  // Vertex 62
        -0.434359f, -0.457566f, -0.304403f, -0.4632f, -0.4884f, 0.7395f, 0.2828f, 0.2712f,  // Vertex 63
        -0.576540f, -0.526340f, -0.051832f, 0.3781f, -0.5059f, 0.7753f, 0.2117f, 0.2368f,  // Vertex 64
        -0.556346f, -0.592053f, 0.231220f, 0.4495f, -0.5020f, 0.7389f, 0.2218f, 0.2040f,  // Vertex 65
        -0.352995f, -0.546973f, 0.481093f, 0.7917f, -0.5194f, 0.3218f, 0.3235f, 0.2265f,  // Vertex 66
        -0.078765f, -0.598786f, 0.602868f, 0.8451f, -0.5221f, -0.1149f, 0.4606f, 0.2006f,  // Vertex 67
        0.203821f, -0.558857f, 0.532000f, 0.7193f, -0.5224f, -0.4580f, 0.6019f, 0.2206f,  // Vertex 68
        0.453582f, -0.661474f, 0.368004f, 0.2530f, -0.4965f, -0.8304f, 0.7268f, 0.1693f,  // Vertex 69
        0.033067f, 0.441343f, 0.043667f, -0.1565f, -0.4728f, -0.8672f, 0.5165f, 0.7207f,  // Vertex 70
        -0.015909f, 0.407872f, 0.005358f, -0.3707f, -0.4761f, -0.7974f, 0.4920f, 0.7039f,  // Vertex 71
        0.617967f, -1.009826f, -0.340839f, -0.8834f, -0.4687f, -0.0073f, 0.8090f, -0.0049f,  // Vertex 72
        0.728983f, -1.102101f, 0.023882f, 0.8831f, 0.4280f, -0.1921f, 0.8645f, -0.0511f,  // Vertex 73
        0.372462f, -1.097998f, -0.640125f, 0.6175f, 0.4040f, -0.6749f, 0.6862f, -0.0490f,  // Vertex 74
        0.002494f, -1.117398f, -0.749054f, 0.4145f, 0.3922f, -0.8212f, 0.5012f, -0.0587f,  // Vertex 75
        -0.362578f, -1.038122f, -0.647554f, -0.0421f, 0.4022f, -0.9146f, 0.3187f, -0.0191f,  // Vertex 76
        -0.651538f, -1.079801f, -0.392047f, -0.4839f, 0.4208f, -0.7673f, 0.1742f, -0.0399f,  // Vertex 77
        -0.760342f, -1.082158f, -0.022081f, -0.7927f, 0.4430f, -0.4188f, 0.1198f, -0.0411f,  // Vertex 78
        -0.659354f, -1.044437f, 0.343218f, -0.8856f, 0.4642f, 0.0185f, 0.1703f, -0.0222f,  // Vertex 79
        -0.403575f, -1.106198f, 0.631803f, -0.7378f, 0.4772f, 0.4774f, 0.2982f, -0.0531f,  // Vertex 80
        -0.042884f, -1.056610f, 0.710688f, -0.4668f, 0.4853f, 0.7393f, 0.4786f, -0.0283f,  // Vertex 81
        0.341211f, -1.126138f, 0.649723f, 0.1888f, 0.4736f, 0.8603f, 0.6706f, -0.0631f,  // Vertex 82
        0.541632f, -1.004089f, 0.332559f, 0.5469f, 0.4533f, 0.7039f, 0.7708f, -0.0020f,  // Vertex 83
        0.014154f, -0.945019f, 0.007551f, 0.7643f, 0.4481f, 0.4637f, 0.5071f, 0.0275f,  // Vertex 84
        -0.043767f, -1.270546f, -0.075931f, -0.8526f, -0.4843f, 0.1962f, 0.4781f, -0.1353f,  // Vertex 85
        -0.106500f, -1.733840f, -0.034932f, -0.6099f, -0.4619f, 0.6440f, 0.4467f, -0.3669f,  // Vertex 86
        -0.048966f, -1.733840f, -0.087408f, -0.4031f, -0.4495f, 0.7972f, 0.4755f, -0.3669f,  // Vertex 87
        -0.109680f, -1.270546f, 0.039942f, 0.0386f, -0.4591f, 0.8875f, 0.4452f, -0.1353f,  // Vertex 88
        -0.122202f, -1.733840f, 0.041340f, 0.4661f, -0.4771f, 0.7450f, 0.4389f, -0.3669f,  // Vertex 89
        -0.071398f, -1.270546f, 0.094417f, 0.7707f, -0.4979f, 0.3977f, 0.4643f, -0.1353f,  // Vertex 90
        -0.019846f, -1.270546f, 0.138435f, 0.8558f, -0.5173f, -0.0065f, 0.4901f, -0.1353f,  // Vertex 91
        -0.099440f, -1.733840f, 0.121640f, 0.7164f, -0.5321f, -0.4512f, 0.4503f, -0.3669f,  // Vertex 92
        0.049806f, -1.270546f, 0.130662f, 0.4499f, -0.5418f, -0.7100f, 0.5249f, -0.1353f,  // Vertex 93
        -0.022387f, -1.733840f, 0.160142f, -0.1701f, -0.5339f, -0.8283f, 0.4888f, -0.3669f,  // Vertex 94
        0.101586f, -1.270546f, 0.083434f, -0.5422f, -0.5122f, -0.6661f, 0.5508f, -0.1353f,  // Vertex 95
        0.045638f, -1.733840f, 0.132774f, -0.7444f, -0.5061f, -0.4356f, 0.5228f, -0.3669f,  // Vertex 96
        0.115718f, -1.270546f, 0.014790f, 0.9040f, 0.4082f, -0.1267f, 0.5579f, -0.1353f,  // Vertex 97
        0.121904f, -1.733840f, 0.099030f, 0.7111f, 0.4222f, -0.5622f, 0.5610f, -0.3669f,  // Vertex 98
        0.086802f, -1.270546f, -0.049051f, 0.3639f, 0.4403f, -0.8208f, 0.5434f, -0.1353f,  // Vertex 99
        0.156339f, -1.724473f, 0.013393f, -0.1055f, 0.4598f, -0.8818f, 0.5782f, -0.3622f,  // Vertex 100
        0.025884f, -1.270546f, -0.074337f, -0.5390f, 0.4709f, -0.6984f, 0.5129f, -0.1353f,  // Vertex 101
        0.028425f, -1.733840f, -0.096044f, -0.8166f, 0.4729f, -0.3309f, 0.5142f, -0.3669f,  // Vertex 102
        0.018262f, -0.403840f, -0.046680f, -0.8721f, 0.4592f, 0.1688f, 0.5091f, 0.2981f,  // Vertex 103
        0.058874f, -0.403840f, -0.023579f, -0.7328f, 0.4432f, 0.5164f, 0.5294f, 0.2981f,  // Vertex 104
        0.078152f, -0.403840f, 0.018981f, -0.2997f, 0.4233f, 0.8550f, 0.5391f, 0.2981f,  // Vertex 105
        0.068731f, -0.403840f, 0.064745f, 0.1697f, 0.3987f, 0.9013f, 0.5344f, 0.2981f,  // Vertex 106
        0.034210f, -0.403840f, 0.096230f, 0.6116f, 0.3759f, 0.6962f, 0.5171f, 0.2981f,  // Vertex 107
        -0.012224f, -0.403840f, 0.101412f, 0.8002f, 0.3791f, 0.4647f, 0.4939f, 0.2981f,  // Vertex 108
        -0.052836f, -0.403840f, 0.078310f, -0.8749f, -0.4659f, 0.1324f, 0.4736f, 0.2981f,  // Vertex 109
        -0.072113f, -0.403840f, 0.035750f, -0.6963f, -0.4782f, 0.5352f, 0.4639f, 0.2981f,  // Vertex 110
        -0.062693f, -0.403840f, -0.010013f, -0.3503f, -0.4967f, 0.7941f, 0.4687f, 0.2981f,  // Vertex 111
        -0.028172f, -0.403840f, -0.041499f, 0.0995f, -0.5149f, 0.8515f, 0.4859f, 0.2981f,  // Vertex 112
        0.072838f, -0.857828f, -0.036315f, 0.5049f, -0.5272f, 0.6835f, 0.5364f, 0.0711f,  // Vertex 113
        0.022073f, -0.857828f, -0.065192f, 0.7928f, -0.5293f, 0.3022f, 0.5110f, 0.0711f,  // Vertex 114
        0.096935f, -0.857828f, 0.016886f, 0.8403f, -0.5117f, -0.1788f, 0.5485f, 0.0711f,  // Vertex 115
        0.085159f, -0.857828f, 0.074090f, 0.7148f, -0.4970f, -0.4920f, 0.5426f, 0.0711f,  // Vertex 116
        0.042008f, -0.857828f, 0.113446f, 0.2795f, -0.4778f, -0.8328f, 0.5210f, 0.0711f,  // Vertex 117
        -0.016035f, -0.857828f, 0.119924f, -0.1557f, -0.4547f, -0.8769f, 0.4920f, 0.0711f,  // Vertex 118
        -0.066800f, -0.857828f, 0.091047f, -0.6123f, -0.4288f, -0.6642f, 0.4666f, 0.0711f,  // Vertex 119
        -0.090897f, -0.857828f, 0.037846f, -0.7671f, -0.4320f, -0.4742f, 0.4546f, 0.0711f,  // Vertex 120
        -0.079120f, -0.857828f, -0.019358f, 0.8861f, 0.4352f, -0.1596f, 0.4604f, 0.0711f,  // Vertex 121
        -0.035970f, -0.857828f, -0.058715f, 0.6276f, 0.4378f, -0.6438f, 0.4820f, 0.0711f,  // Vertex 122
        0.058875f, -0.513897f, -0.023579f, 0.2336f, 0.4333f, -0.8704f, 0.5294f, 0.2431f,  // Vertex 123
        0.018262f, -0.513897f, -0.046680f, -0.1517f, 0.4367f, -0.8867f, 0.5091f, 0.2431f,  // Vertex 124
        0.078152f, -0.513897f, 0.018981f, -0.6296f, 0.4400f, -0.6403f, 0.5391f, 0.2431f,  // Vertex 125
        0.068731f, -0.513897f, 0.064745f, -0.8640f, 0.4363f, -0.2513f, 0.5344f, 0.2431f,  // Vertex 126
        0.034210f, -0.513897f, 0.096230f, -0.8783f, 0.4352f, 0.1979f, 0.5171f, 0.2431f,  // Vertex 127
        -0.012224f, -0.513897f, 0.101412f, -0.6283f, 0.4293f, 0.6488f, 0.4939f, 0.2431f,  // Vertex 128
        -0.052836f, -0.513897f, 0.078310f, -0.2487f, 0.4240f, 0.8708f, 0.4736f, 0.2431f,  // Vertex 129
        -0.072113f, -0.513897f, 0.035750f, 0.2160f, 0.4204f, 0.8812f, 0.4639f, 0.2431f,  // Vertex 130
        -0.062693f, -0.513897f, -0.010013f, 0.6911f, 0.4107f, 0.5947f, 0.4687f, 0.2431f,  // Vertex 131
        -0.028172f, -0.513897f, -0.041499f, 0.8304f, 0.4142f, 0.3725f, 0.4859f, 0.2431f,  // Vertex 132
        0.133576f, -1.724473f, -0.085640f, -0.2072f, -0.9616f, -0.1802f, 0.5668f, -0.3622f,  // Vertex 133
        -0.104914f, -1.270546f, -0.038069f, 0.0411f, -0.9671f, 0.2512f, 0.4475f, -0.1353f,  // Vertex 134
        0.025726f, 0.465855f, -0.094434f, -0.0143f, -0.9749f, 0.2223f, 0.5129f, 0.7329f,  // Vertex 135
        0.561016f, -0.823776f, -0.299656f, -0.1476f, -0.9638f, 0.2219f, 0.7805f, 0.0881f,  // Vertex 136
        0.654359f, -0.883234f, 0.030207f, 0.1760f, -0.9836f, 0.0386f, 0.8272f, 0.0584f,  // Vertex 137
        0.336606f, -0.909383f, -0.567144f, 0.1725f, -0.9840f, 0.0445f, 0.6683f, 0.0453f,  // Vertex 138
        -0.006543f, -0.877253f, -0.647262f, 0.1721f, -0.9836f, 0.0540f, 0.4967f, 0.0614f,  // Vertex 139
        -0.306397f, -0.849406f, -0.579065f, 0.0276f, -0.9722f, -0.2325f, 0.3468f, 0.0753f,  // Vertex 140
        -0.565714f, -0.863309f, -0.353257f, 0.1651f, -0.9761f, -0.1415f, 0.2171f, 0.0683f,  // Vertex 141
        -0.665448f, -0.838445f, -0.026995f, -0.2015f, -0.9647f, -0.1695f, 0.1673f, 0.0808f,  // Vertex 142
        -0.578271f, -0.782710f, 0.294611f, 0.0853f, -0.9468f, -0.3104f, 0.2109f, 0.1086f,  // Vertex 143
        -0.355263f, -0.823216f, 0.556581f, -0.2151f, -0.9609f, 0.1745f, 0.3224f, 0.0884f,  // Vertex 144
        -0.035070f, -0.781412f, 0.626732f, -0.6737f, 0.0259f, -0.7386f, 0.4825f, 0.1093f,  // Vertex 145
        0.304584f, -0.854766f, 0.581372f, -0.9791f, 0.0259f, -0.2016f, 0.6523f, 0.0726f,  // Vertex 146
        0.487615f, -0.772121f, 0.294769f, -0.8179f, 0.0238f, 0.5748f, 0.7438f, 0.1139f,  // Vertex 147
        0.023942f, -0.730916f, -0.002013f, -0.6471f, 0.0837f, 0.7578f, 0.5120f, 0.1345f,  // Vertex 148
        };

        indices = {
            2, 1, 0, 1, 3, 0,  // Face 1
            3, 4, 0, 4, 5, 0,  // Face 2
            5, 6, 0, 6, 7, 0,  // Face 3
            7, 8, 0, 8, 9, 0,  // Face 4
            9, 10, 0, 10, 11, 0,  // Face 5
            11, 12, 0, 12, 2, 0,  // Face 6
            13, 1, 2, 13, 3, 1,  // Face 7
            13, 4, 3, 13, 5, 4,  // Face 8
            13, 6, 5, 13, 7, 6,  // Face 9
            13, 8, 7, 13, 9, 8,  // Face 10
            13, 10, 9, 13, 11, 10,  // Face 11
            13, 12, 11, 13, 2, 12,  // Face 12
            16, 15, 14, 15, 17, 14,  // Face 13
            17, 18, 14, 18, 19, 14,  // Face 14
            19, 20, 14, 20, 21, 14,  // Face 15
            21, 22, 14, 22, 23, 14,  // Face 16
            23, 24, 14, 24, 25, 14,  // Face 17
            25, 26, 14, 26, 16, 14,  // Face 18
            27, 15, 16, 27, 17, 15,  // Face 19
            27, 18, 17, 27, 19, 18,  // Face 20
            27, 20, 19, 27, 21, 20,  // Face 21
            27, 22, 21, 27, 23, 22,  // Face 22
            27, 24, 23, 27, 25, 24,  // Face 23
            27, 26, 25, 27, 16, 26,  // Face 24
            30, 29, 28, 29, 31, 28,  // Face 25
            31, 32, 28, 32, 33, 28,  // Face 26
            33, 34, 28, 34, 35, 28,  // Face 27
            35, 36, 28, 36, 37, 28,  // Face 28
            37, 38, 28, 38, 39, 28,  // Face 29
            39, 40, 28, 40, 30, 28,  // Face 30
            41, 29, 30, 41, 31, 29,  // Face 31
            41, 32, 31, 41, 33, 32,  // Face 32
            41, 34, 33, 41, 35, 34,  // Face 33
            41, 36, 35, 41, 37, 36,  // Face 34
            41, 38, 37, 41, 39, 38,  // Face 35
            41, 40, 39, 41, 30, 40,  // Face 36
            44, 43, 42, 43, 45, 42,  // Face 37
            45, 46, 42, 46, 47, 42,  // Face 38
            47, 48, 42, 48, 49, 42,  // Face 39
            49, 50, 42, 50, 51, 42,  // Face 40
            51, 52, 42, 52, 53, 42,  // Face 41
            53, 54, 42, 54, 44, 42,  // Face 42
            55, 43, 44, 55, 45, 43,  // Face 43
            55, 46, 45, 55, 47, 46,  // Face 44
            55, 48, 47, 55, 49, 48,  // Face 45
            55, 50, 49, 55, 51, 50,  // Face 46
            55, 52, 51, 55, 53, 52,  // Face 47
            55, 54, 53, 55, 44, 54,  // Face 48
            58, 57, 56, 57, 59, 56,  // Face 49
            59, 60, 56, 60, 61, 56,  // Face 50
            61, 62, 56, 62, 63, 56,  // Face 51
            63, 64, 56, 64, 65, 56,  // Face 52
            65, 66, 56, 66, 67, 56,  // Face 53
            67, 68, 56, 68, 58, 56,  // Face 54
            69, 57, 58, 69, 59, 57,  // Face 55
            69, 60, 59, 69, 61, 60,  // Face 56
            69, 62, 61, 69, 63, 62,  // Face 57
            69, 64, 63, 69, 65, 64,  // Face 58
            69, 66, 65, 69, 67, 66,  // Face 59
            69, 68, 67, 69, 58, 68,  // Face 60
            72, 71, 70, 71, 73, 70,  // Face 61
            73, 74, 70, 74, 75, 70,  // Face 62
            75, 76, 70, 76, 77, 70,  // Face 63
            77, 78, 70, 78, 79, 70,  // Face 64
            79, 80, 70, 80, 81, 70,  // Face 65
            81, 82, 70, 82, 72, 70,  // Face 66
            83, 71, 72, 83, 73, 71,  // Face 67
            83, 74, 73, 83, 75, 74,  // Face 68
            83, 76, 75, 83, 77, 76,  // Face 69
            83, 78, 77, 83, 79, 78,  // Face 70
            83, 80, 79, 83, 81, 80,  // Face 71
            83, 82, 81, 83, 72, 82,  // Face 72
            136, 135, 134, 135, 137, 134,  // Face 73
            137, 138, 134, 138, 139, 134,  // Face 74
            139, 140, 134, 140, 141, 134,  // Face 75
            141, 142, 134, 142, 143, 134,  // Face 76
            143, 144, 134, 144, 145, 134,  // Face 77
            145, 146, 134, 146, 136, 134,  // Face 78
            147, 135, 136, 147, 137, 135,  // Face 79
            147, 138, 137, 147, 139, 138,  // Face 80
            147, 140, 139, 147, 141, 140,  // Face 81
            147, 142, 141, 147, 143, 142,  // Face 82
            147, 144, 143, 147, 145, 144,  // Face 83
            147, 146, 145, 147, 136, 146,  // Face 84
            86, 85, 84, 85, 88, 87,  // Face 85
            88, 89, 87, 91, 90, 89,  // Face 86
            93, 92, 90, 95, 94, 92,  // Face 87
            97, 96, 94, 99, 98, 96,  // Face 88
            101, 100, 98, 101, 86, 84,  // Face 89
            113, 112, 98, 112, 98, 96,  // Face 90
            112, 96, 114, 114, 96, 94,  // Face 91
            114, 94, 115, 115, 94, 92,  // Face 92
            115, 92, 116, 116, 92, 90,  // Face 93
            116, 90, 117, 117, 118, 90,  // Face 94
            118, 119, 87, 119, 120, 87,  // Face 95
            120, 121, 84, 121, 113, 84,  // Face 96
            123, 113, 112, 123, 112, 122,  // Face 97
            122, 112, 114, 122, 114, 124,  // Face 98
            124, 114, 115, 124, 115, 125,  // Face 99
            125, 115, 116, 125, 116, 126,  // Face 100
            126, 116, 117, 126, 117, 127,  // Face 101
            127, 117, 118, 127, 118, 128,  // Face 102
            128, 118, 119, 128, 119, 129,  // Face 103
            129, 119, 120, 129, 120, 130,  // Face 104
            130, 120, 121, 130, 121, 131,  // Face 105
            131, 121, 113, 131, 113, 123,  // Face 106
            102, 123, 122, 102, 122, 103,  // Face 107
            103, 122, 124, 103, 124, 104,  // Face 108
            104, 124, 125, 104, 125, 105,  // Face 109
            105, 125, 126, 105, 126, 106,  // Face 110
            106, 126, 127, 106, 127, 107,  // Face 111
            107, 127, 128, 107, 128, 108,  // Face 112
            108, 128, 129, 108, 129, 109,  // Face 113
            109, 129, 130, 109, 130, 110,  // Face 114
            110, 130, 131, 110, 131, 111,  // Face 115
            111, 131, 123, 111, 123, 102,  // Face 116
            97, 99, 96, 132, 99, 97,  // Face 117
            98, 132, 101, 101, 132, 97,  // Face 118
            99, 132, 98, 95, 97, 94,  // Face 119
            93, 95, 92, 91, 93, 90,  // Face 120
            88, 91, 89, 84, 100, 101,  // Face 121
            98, 100, 113, 113, 100, 84,  // Face 122
            85, 133, 84, 87, 133, 85,  // Face 123
            120, 133, 87, 84, 133, 120,  // Face 124
            118, 89, 90, 87, 89, 118,  // Face 125
        };




        // Generate and bind VAO, VBO, EBO
        glGenVertexArrays(1, &VAO);
        glGenBuffers(1, &VBO);
        glGenBuffers(1, &EBO);

        glBindVertexArray(VAO);

        glBindBuffer(GL_ARRAY_BUFFER, VBO);
        glBufferData(GL_ARRAY_BUFFER, vertices.size() * sizeof(float), vertices.data(), GL_STATIC_DRAW);

        glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO);
        glBufferData(GL_ELEMENT_ARRAY_BUFFER, indices.size() * sizeof(unsigned int), indices.data(), GL_STATIC_DRAW);

        // Position attribute
        glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)0);
        glEnableVertexAttribArray(0);

        // Normal attribute
        glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(3 * sizeof(float)));
        glEnableVertexAttribArray(1);

        // Texture coordinate attribute
        glVertexAttribPointer(2, 2, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(6 * sizeof(float)));
        glEnableVertexAttribArray(2);

        glBindVertexArray(0);
    }
};

#endif /* GLASS_H */
